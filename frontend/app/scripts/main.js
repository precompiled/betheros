/**
 * web3JS Sample DAPP by http://acloudfan.com
 * Version: 102     May 20th, 2017
 *
 * Application developed as part of the course on Ethereum Blockchain
 * All Rights Reserved - Please do not share.
 * Updated versions of the code is available on the link below:
 * APP will be updated time to time so please check back
 *
 * http://www.acloudfan.com
 *
 * This DAPP is available on the following link .... to use it you would need MetaMask
 * http://TheDapps.com
 *
 * Geth
 * =====
 * Application developed against Geth/ROPSTEN
 *
 * TestRPC
 * =======
 * Some API NOT Supported in TestRPC
 * Etherscan.io links will not be supported for TestRPC
 *
 * META MASK
 * =========
 * MetaMask will work - except some for some functions coded SYNCHRONOUSLY
 * You may change it to work with MetaMask
 *
 */


// The sample code was compiled in Remix
// Bytecode / Interface generated by Remix was pasted here
// var contract_abidefinition = '[{"constant":false,"inputs":[],"name":"getNum","outputs":[{"name":"n","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"n","type":"uint256"}],"name":"setNum","outputs":[],"payable":false,"type":"function"},{"inputs":[{"name":"x","type":"uint256"}],"payable":false,"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"caller","type":"address"},{"indexed":true,"name":"oldNum","type":"bytes32"},{"indexed":true,"name":"newNum","type":"bytes32"}],"name":"NumberSetEvent","type":"event"}]';
//  var contract_abidefinition = '[{"constant":false,"inputs":[],"name":"getNum","outputs":[{"name":"n","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"n","type":"uint256"}],"name":"setNum","outputs":[],"payable":false,"type":"function"},{"inputs":[{"name":"x","type":"uint256"}],"payable":false,"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"caller","type":"address"},{"indexed":true,"name":"oldNum","type":"bytes32"},{"indexed":true,"name":"newNum","type":"bytes32"}],"name":"NumberSetEvent","type":"event"}]';
var contract_abidefinition = '[{"constant":false,"inputs":[{"name":"username","type":"string"}],"name":"getContribution","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"actionPoints","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"username","type":"string"},{"name":"addr","type":"address"}],"name":"addContributor","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"username","type":"string"},{"name":"action","type":"uint256"},{"name":"numberLines","type":"uint256"}],"name":"handleContribution","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"donatorName","type":"string"}],"name":"donate","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"actionCoefficient","type":"uint256"}],"name":"addAction","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[],"payable":true,"stateMutability":"payable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"donatorName","type":"string"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"DonationReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"username","type":"string"},{"indexed":false,"name":"addr","type":"address"}],"name":"ContributorAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"username","type":"string"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":false,"name":"action","type":"uint256"}],"name":"ContributorRewarded","type":"event"}]';
var contract_bytecode = '0x60606040523615610081576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063025ae360146100865780635c5c3021146100f75780636a8aa10d1461012e5780639225e228146101aa578063ad7a672f14610219578063b5aebc8014610242578063be8fc0f714610294575b600080fd5b341561009157600080fd5b6100e1600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506102b7565b6040518082815260200191505060405180910390f35b341561010257600080fd5b610118600480803590602001909190505061032e565b6040518082815260200191505060405180910390f35b341561013957600080fd5b6101a8600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610353565b005b34156101b557600080fd5b610217600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091908035906020019091908035906020019091905050610531565b005b341561022457600080fd5b61022c610a8a565b6040518082815260200191505060405180910390f35b610292600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610a90565b005b341561029f57600080fd5b6102b56004808035906020019091905050610bc1565b005b60006004826040518082805190602001908083835b6020831015156102f257805182525b6020820191506020810190506020830392506102cc565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205490505b919050565b60008181548110151561033d57fe5b906000526020600020900160005b915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156103af57600080fd5b806003836040518082805190602001908083835b6020831015156103e957805182525b6020820191506020810190506020830392506103c3565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4c16a7ba1e895ca908c8130f58cbcb33d94c38da8f74d9d37713c743237994f9828260405180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156104f05780820151818401525b6020810190506104d4565b50505050905090810190601f16801561051d5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15b5b5050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561059057600080fd5b60006003866040518082805190602001908083835b6020831015156105cb57805182525b6020820191506020810190506020830392506105a5565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1611151561064157600080fd5b6000805490508410151561065457600080fd5b829150600284101561067f576107d0831115610670576107d091505b603283101561067e57603291505b5b620186a08260008681548110151561069357fe5b906000526020600020900160005b50546004886040518082805190602001908083835b6020831015156106dc57805182525b6020820191506020810190506020830392506106b6565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020540101111561079157620186a06004866040518082805190602001908083835b60208310151561075557805182525b60208201915060208101905060208303925061072f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902081905550610891565b816000858154811015156107a157fe5b906000526020600020900160005b50546004876040518082805190602001908083835b6020831015156107ea57805182525b6020820191506020810190506020830392506107c4565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205401016004866040518082805190602001908083835b60208310151561085957805182525b602082019150602081019050602083039250610833565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055505b6004856040518082805190602001908083835b6020831015156108ca57805182525b6020820191506020810190506020830392506108a4565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902054651b48eb57e0000290506003856040518082805190602001908083835b60208310151561094157805182525b60208201915060208101905060208303925061091b565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015156109d457600080fd5b7fabb435e0190be6d8fa0a0988442dabf07dd923e5aac5f280ec306f5a984695128582866040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610a455780820151818401525b602081019050610a29565b50505050905090810190601f168015610a725780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a15b5b5050505050565b60025481565b6000606460633402811515610aa157fe5b049050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc8234039081150290604051600060405180830381858888f193505050501515610b0857600080fd5b806002600082825401925050819055507ef79f60084fd2b2fc97daffa19b748a4dec75b1c281bac18ef320d90de1db9d82826040518080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610b815780820151818401525b602081019050610b65565b50505050905090810190601f168015610bae5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c1d57600080fd5b60008054806001018281610c319190610c4c565b916000526020600020900160005b83909190915055505b5b50565b815481835581811511610c7357818360005260206000209182019101610c729190610c78565b5b505050565b610c9a91905b80821115610c96576000816000905550600101610c7e565b5090565b905600a165627a7a72305820a4d9e3be1a0396a49594e0ad85e05c83c586427bbc1ac3dd617bdb26e63d50240029';
var betherosInitialTransaction = '0x5f5c2d681b210d93fc1ba11f81e8322d455c0acf5f53f6c8082b0552b5a775b4';
var betherosFirstBlock = '1662740';
//Betheros
var contractAbi = [{"constant":false,"inputs":[{"name":"username","type":"string"}],"name":"getContribution","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"actionPoints","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"username","type":"string"},{"name":"addr","type":"address"}],"name":"addContributor","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"username","type":"string"},{"name":"action","type":"uint256"},{"name":"numberLines","type":"uint256"}],"name":"handleContribution","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"donatorName","type":"string"}],"name":"donate","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"actionCoefficient","type":"uint256"}],"name":"addAction","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[],"payable":true,"stateMutability":"payable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"donatorName","type":"string"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"DonationReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"username","type":"string"},{"indexed":false,"name":"addr","type":"address"}],"name":"ContributorAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"username","type":"string"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":false,"name":"action","type":"uint256"}],"name":"ContributorRewarded","type":"event"}];
var contractAddress = '0xD2E8C7b3e7d56FdD3478Faae84e27F878A572a8c';
var betherosContract;

var autoRetrieveFlag = true;

// Holds the accounts
var accounts;

// Holds the filter objects
var filterWatch;
var filterEventCounter;

// Holds the contract event object
var contractEvent;
var contractEventCounter=0;

// Maintains the info on node type
var     nodeType = 'geth';

/**
 * Listener for load
 */
window.addEventListener('load', function() {

  // Checking if Web3 has been injected by the browser (Mist/MetaMask)
  if (typeof web3 !== 'undefined') {
    // Use Mist/MetaMask's provider
    window.web3 = new Web3(web3.currentProvider);
  } else {
    console.log('Injected web3 Not Found!!!')
    // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)
    window.web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));

    var provider = document.getElementById('provider_url').value;
    window.web3 = new Web3(new Web3.providers.HttpProvider(provider));
  }

  // Now you can start your app & access web3 freely:
  betherosContract = window.web3.eth.contract(contractAbi).at(contractAddress);
  startApp();
  displayLog();

})


/**
 * This method gets invoked when document is ready
 */
function    startApp(){

    // If the app is reconnected we should reset the watch
    // doFilterStopWatching();
    // doContractEventWatchStop();

    // // Set the connect status on the app
    // if (web3 && web3.isConnected()) {
    //     setData('connect_status','Connected', false);

    //     // Gets the version data and populates the result UI
    //     setWeb3Version();

    //     if(autoRetrieveFlag) doGetAccounts();

    // } else {
    //     setData('connect_status','Not Connected', true);
    // }

    // // no action to be taken if this flag is OFF
    // // during development for convinience you may set autoRetrieveFlag=true
    // if(!autoRetrieveFlag)  return;



    // // doConnect();
    // // // doGetAccounts();
    // doGetNodeStatus();

    // // Compilation is available only for TestRPC
    // // Geth 1.6 and above does not support compilation
    // // MetaMask does not support compilation
    // doGetCompilers();
}

/**
 * This method is called for connecting to the node
 * The Provider URL is provided in a Document element with the
 * id = provider_url
 */


function doConnect()    {

    // Get the provider URL
    var provider = document.getElementById('provider_url').value;
    var provider = document.getElementById('provider_url').value;
    window.web3 = new Web3(new Web3.providers.HttpProvider(provider));
    startApp();

}

/**
 * Get the version information for Web3
 */

function    setWeb3Version() {

    var versionJson = {};

    // Asynchronous version
    web3.version.getNode(function(error, result){
        if(error) setData('version_information',error,true);
        else {
            setData('version_information',result,false);

            if(result.toLowerCase().includes('metamask')){
                nodeType = 'metamask';
            } else if(result.toLowerCase().includes('testrpc')){
                nodeType = 'testrpc';
            } else {
                nodeType = 'geth';
            }


            // set up UI elements based on the node type
            setUIBasedOnNodeType();
        }
    });
}



/**
 * Uses the web3.net status to check if the client is listening and peer count
 */

function    doGetNodeStatus()  {

    // Asynch version
    web3.net.getListening(function(error, result){
        if(error) setData('get_peer_count',error,true);
        else {
            // Since connected lets get the count
            web3.net.getPeerCount(  function(  error,  result ) {
            if(error){
                setData('get_peer_count',error,true);
            } else {
                setData('get_peer_count','Peer Count: '+result,(result == 0));
            }
        });
        }
    });
}

/**
 * Gets the accounts under the node
 *
 */

// function    doGetAccounts() {
//     // This is the synch call for getting the accounts
//     // var accounts = web3.eth.accounts

//     // Asynchronous call to get the accounts
//     // result = [Array of accounts]
//     // MetaMask returns 1 account in the array - that is the currently selected account
//     web3.eth.getAccounts(function (error, result) {
//         if (error) {
//             setData('accounts_count', error, true);
//         } else {
//             accounts = result;
//             setData('accounts_count', result.length, false);
//             // You need to have at least 1 account to proceed
//             if(result.length == 0) {
//                 if(nodeType == 'metamask'){
//                     alert('Unlock MetaMask *and* click \'Get Accounts\'');
//                 }
//                 return;
//             }

//             // Remove the list items that may already be there
//             removeAllChildItems('accounts_list');
//             // Add the accounts as list items
//             for (var i = 0; i < result.length; i++) {
//                 addAccountsToList('accounts_list',i,result[i])
//             }

//             var coinbase = web3.eth.coinbase;
//             // trim it so as to fit in the window/UI
//             if(coinbase) coinbase = coinbase.substring(0,25)+'...'
//             setData('coinbase', coinbase, false);
//             // set the default accounts
//             var defaultAccount = web3.eth.defaultAccount;
//             if(!defaultAccount){
//                 web3.eth.defaultAccount =  result[0];
//                 defaultAccount = '[Undef]' + result[0];
//             }

//             defaultAccount = defaultAccount.substring(0,25)+'...';
//             setData('defaultAccount', defaultAccount, false);
//         }
//         // Get the balances of all accounts doGetBalances
//         doGetBalances(accounts)

//         // This populates the SELECT boxes with the accounts
//         addAccountsToSelects(accounts);
//     });
// }

/**
 * Get the balances of all accounts.
 */
// function    doGetBalances(accounts) {

//     // Remove the balances if they already exist
//     removeAllChildItems('account_balances_list');

//     // Add the balances as the list items
//     for (var i = 0; i < accounts.length; i++) {

//        // var bal = web3.eth.getBalance(accounts[i]);
//        web3.eth.getBalance(accounts[i],web3.eth.defaultBlock,function(error,result){
//            // Convert the balance to ethers
//             var bal = web3.fromWei(result,'ether').toFixed(2);
//             addAccountBalancesToList('account_balances_list',i,bal);
//         });
//     }
// }

/**
 * This gets invoked for sending the transaction
 */

// function    doSendTransaction()  {

//     var transactionObject = createTransactionObjectJson();

//     web3.eth.sendTransaction(transactionObject, function(error, result) {

//         if(error){
//             setData('send_transaction_error_or_result', error, true);
//         } else {
//             setData('send_transaction_error_or_result', result, false);
//             // set the link to ether scan
//             var etherscanLinkA=document.getElementById('etherscan_io_tx_link');
//             etherscanLinkA.href = createEtherscanIoUrl('tx',result);
//             etherscanLinkA.innerHTML='etherscan.io'
//             //console.log(etherscanLinkA)
//         }
//     });
// }

/**
 * Unlocks the account
 * UNLOCK/LOCK not supported in TestRPC
 * Ignored in MetaMask
 */

// function    doUnlockAccount()  {

//     setData('lock_unlock_result','...',true);
//     var account = document.getElementById('select_to_unlock_account').value;
//     var password = document.getElementById('unlock_account_password').value;

//     // synchronous flavor
//     // web3.personal.unlockAccount(account, password, duration)
//     // web3.personal.unlockAccount(account, password)


//     web3.personal.unlockAccount(account, password,function(error, result)  {

//         // console.log(error,result)
//         if(error){
//             setData('lock_unlock_result',error,true);
//         } else {
//             // Result = True if unlocked, else false
//             var str = account.substring(0,20)+'...Unlocked';
//             if(result){
//                 setData('lock_unlock_result',str,false);
//             } else {
//                 // This does not get called - since and error is returned for incorrect password :-)
//                 str = 'Incorrect Password???';
//                 setData('lock_unlock_result',str,true);
//             }


//         }
//     });
// }

// /**
//  * Lock the account
//  */
// function    doLockAccount() {



//     setData('lock_unlock_result','...',true);
//     var account = document.getElementById('select_to_unlock_account').value;
//     //Synchronous flavor
//     //web3.personal.lockAccount(account)

//     web3.personal.lockAccount(account, function(error, result){

//         console.log(error,result)
//         if(error){
//             setData('lock_unlock_result',error,true);
//         } else {
//             var str = account.substring(0,20)+'...Locked';
//             setData('lock_unlock_result',str,false);
//         }
//     });
// }

// /**
//  * Gets the list of compilers
//  */
// function doGetCompilers()  {



//     web3.eth.getCompilers(function(error, result){
//         if(error){
//             setData('list_of_compilers',error,true);
//         } else {
//             // result has an array of compilers
//             if(result.length == 0)
//                 setData('list_of_compilers','No Compilers!!!',true);
//             else
//                 setData('list_of_compilers',result,false);
//         }
//     });
// }

// /**
//  * Starting geth 1.6 - Solidity compilation is not allowed from
//  * web3 JSON/RPC
//  */

// function    doCompileSolidityContract()  {


//     var source = document.getElementById('sourcecode').value;

//     console.log(flattenSource(source));

//     web3.eth.compile.solidity(source, function(error, result){

//         if(error){
//             console.log(error);
//             setData('compilation_result',error,true);
//         } else {
//             // This is an issue seen only on windows - solc compile binary - ignore
//             result = compileResultWindowsHack(result);
//             console.log('Compilation Result=',JSON.stringify(result));
//             var contract_1 = '';
//             var code_1 = '';
//             var abi_1 = '';
//             for(var prop in result){
//                 contract_1 = prop;
//                 code_1 = result[prop].code;
//                 if(!code_1){
//                     // Test RPC returns code in result.code
//                     code_1 = result.code;
//                 }
//                 if(result[prop].info){
//                     abi_1 = result[prop].info.abiDefinition;
//                 } else {
//                     // Test RPC does not have the contracts :) in result
//                     abi_1 = result.info.abiDefinition;
//                 }
//                 break;
//             }
//             // Populate the UI elements
//             setData('compilation_result','Contract#1: '+contract_1,false);
//             document.getElementById('compiled_bytecode').value=code_1;
//             document.getElementById('compiled_abidefinition').value=JSON.stringify(abi_1);

//         }
//     });
// }




// /**
//  * Deploys the contract - ASYNCH
//  */

// function    doDeployContract()   {
//     // Reset the deployment results UI
//     resetDeploymentResultUI();

//     var     abiDefinitionString = document.getElementById('compiled_abidefinition').value;
//     var     abiDefinition = JSON.parse(abiDefinitionString);

//     var     bytecode = document.getElementById('compiled_bytecode').value;

//     // 1. Create the contract object
//     var  contract = web3.eth.contract(abiDefinition);

//     // Get the estimated gas
//     var   gas = document.getElementById('deployment_estimatedgas').value;

//     // 2. Create the params for deployment - all other params are optional, uses default
//     var  params = {
//         from: web3.eth.coinbase,
//         data: bytecode,
//         gas: gas
//     }

//     // 3. This is where the contract gets deployed
//     // Callback method gets called *2*
//     // First time : Result = Txn Hash
//     // Second time: Result = Contract Address
//     var constructor_param = 10;

//     contract.new(constructor_param,params,function(error,result){

//         if(error){
//             setData('contracttransactionhash','Deployment Failed: '+error,true);
//         } else {
//             console.log('RECV:',result)
//             if(result.address){
//                 document.getElementById('contractaddress').value=result.address;
//                 setEtherscanIoLink('contractaddress_link','address',result.address);
//             } else {
//                 // gets set in the first call
//                 setData('contracttransactionhash',result.transactionHash, false);
//                 setEtherscanIoLink('contracttransactionhash_link','tx',result.transactionHash);
//             }
//         }
//     });
// }

/**
 * Deploys the contract - Synchronous
 * Function not in use from UI. Created to show how once can use the synch API
 * contract.new
 */

// function    doDeployContractSynchronous()   {

//     var     abiDefinitionString = document.getElementById('compiled_abidefinition').value;
//     var     abiDefinition = JSON.parse(abiDefinitionString);

//     var     bytecode = document.getElementById('compiled_bytecode').value;

//     // 1. Create the contract object
//     var  contract = web3.eth.contract(abiDefinition);

//     // Get the estimated gas
//     var   gas = document.getElementById('deployment_estimatedgas').value;

//     // 2. Create the params for deployment - all other params are optional, uses default
//     var  params = {
//         from: web3.eth.coinbase,
//         data: bytecode,
//         gas: gas
//     }

//     var contractData = contract.new.getData(10,{'data':bytecode});
//     console.log('Contract Data=',contractData);
//     // call send transaction and then call getTransactionReceipt
//     params.data=contractData
//     var transactionHash= web3.eth.sendTransaction(params)
//     console.log('TxnHash=',transactionHash);
//     web3.eth.getTransactionReceipt(transactionHash, function(error, result){
//         if(error) console.log('SENDTran Error=', error)
//         else   if(error) console.log('SENDTran Hash=', result);
//     });

//     return
// }

// // Utility method for creating the contract instance
// function  createContractInstance(addr){
//     var     abiDefinitionString = document.getElementById('compiled_abidefinition').value;
//     var     abiDefinition = JSON.parse(abiDefinitionString);

//     // Instance uses the definition to create the function

//     var    contract = web3.eth.contract(abiDefinition);

//    // THIS IS AN EXAMPLE - How to create a deploy using the contract
//    // var instance = contract.new(constructor_params, {from:coinbase, gas:10000})
//    // Use the next for manual deployment using the data generated
//    // var contractData = contract.new.getData(constructor_params, {from:coinbase, gas:10000});

//     var    address = addr;

//     if(!address) address = document.getElementById('contractaddress').value;

//     // Instance needs the address

//     var    instance = contract.at(address);

//     return instance;
// }

/**
 * This invokes the contract function
 * locally on the node with no state change propagation
 */
// function    doContractFunctionCall()  {
//     // This leads to the invocation of the method locally
//     var instance = createContractInstance();

//     var    funcName = document.getElementById('contract_select_function').value;

//     if(funcName === 'setNum'){
//         var    parameterValue = document.getElementById('setnum_parameter').value;

//         // MetaMask does not allow synchronous call to 'call' for non-constant function
//         // Change this to asynchronous :)
//         var value = instance.setNum.call(parameterValue);

//         setExecuteResultUI('Call',funcName,parameterValue,value,'',false);
//     } else {

//         instance.getNum.call({},web3.eth.defaultBlock, function(error,result){
//             setExecuteResultUI('Call',funcName,'',result,'',false);
//         });


//     }
// }

// /**
//  * send Transaction costs Gas. State changes are recorded on the chain.
//  */
// function    doContractSendCall()   {
//     // creating the cntract instance
//     var instance = createContractInstance();
//     // read the ui elements
//     var estimatedGas = document.getElementById('contract_execute_estimatedgas').value;
//     var parameterValue = document.getElementById('setnum_parameter').value;
//     var funcName = document.getElementById('contract_select_function').value;
//     //value NOT used as the contract function needs to be modified with "payable" modifier
//     //var value = document.getElementById('invocation_send_value_in_ether').value;
//     //value = web3.toWei(value,'ether');

//     // Create the transaction object
//     var    txnObject = {
//         from: web3.eth.coinbase,
//         gas: estimatedGas
//     }

//     if(funcName === 'setNum'){
//         // setNum with sendTransaction
//         instance.setNum.sendTransaction(parameterValue,txnObject,function(error, result)  {

//             console.log('RECVED>>',error,result);
//             if(error){
//                 setExecuteResultUI('Send Transaction:   ',funcName,'',error,'',true);
//             } else {
//                 setExecuteResultUI('Send Transaction:   ',funcName,parameterValue,result,result,false);
//             }
//         });
//     } else {
//          // getNum with sendTransaction
//         instance.getNum.sendTransaction(txnObject,function(error, result)  {

//             console.log('RECVED>>',error,result);
//             if(error){
//                 setExecuteResultUI('Send Transaction:   ',funcName,'',error,'',true);
//             } else {
//                 setExecuteResultUI('Send Transaction:   ',funcName,'',result,result,false);
//             }
//         });
//     }
// }

function donate(){
    var donatorName = $('#donatorName').val().toString();
    var amount = web3.toWei($('#amount').val(), 'ether');
    console.log(donatorName);
    console.log(amount);
    console.log($('#amount').val());
    betherosContract.donate.sendTransaction(
        donatorName,
        {value: amount},
        function(error, result)  {
            console.log('RECIEVED>>',error,result);
            if(error){
                console.log(error);// setExecuteResultUI('Send Transaction:   donate',error,'',true);
            } else {
                console.log(result);// setExecuteResultUI('Send Transaction:   ',parameterValue,result,result,false);
            }
        })

}
/**
 * Starts the filter watch for events with options specified by the user
 */


// function    doFilterWatchStart()   {
//     //1. Stop the wtach if its already ON
//     doFilterStopWatching();
//     //2. Reset the UI
//     setData('watch_event_count','0',false);

//     //3. Create the filter option
//     var options = generateFilterOptions();
//     console.log('FILTER Watch Options:', JSON.stringify(options));

//     //4. Set the applied watch filter UI Input box
//     document.getElementById('applied_watch_filter').value=JSON.stringify(options);

//     //5. Create instance of the filter
//     filterWatch = web3.eth.filter(options);

//     //6. Now start watching
//     filterWatch.watch(function(error,result){
//         if(error){
//             console.error('Filter Watch Error: ',error);
//         } else {
//             filterEventCounter++;
//             // Update the UI for the counter
//             setData('watch_event_count', filterEventCounter, false);

//             // Updates the UI with received event
//             addEventListItem('watch_events_list',result,5);
//         }
//     });
// }

// /**
//  * Stop watching for events
//  */

// function    doFilterStopWatching()  {

//     // 1. Stop watching if watching iactive
//     if(filterWatch){
//         filterWatch.stopWatching();
//         filterWatch = undefined;
//     }
//     // 2. Reset the UI
//     setData('watch_event_count','Not Watching',true);
//     document.getElementById('applied_watch_filter').value='';

//     // 3. Remove all of the past events from the list
//     clearList('watch_events_list');

//     // 4. reset the counter
//     filterEventCounter = 0;
// }

// /**
//  * Get the logs for the specified filter
//  * Testnet sample contract address:
//  */

// function    doFilterGetLogs()  {

//     // 1. Clear the list
//     clearList('get_logs_list');

//     // 2. Create the filter option
//     var options = generateFilterOptions();
//     console.log('FILTER Get Options:', JSON.stringify(options));

//     // 3. Set the applied watch filter UI Input box
//     document.getElementById('applied_log_filter').value=JSON.stringify(options);

//     // 4. Create the instance of the filter
//     var filterGet = web3.eth.filter(options);

//     // 5. Invoke get on filter with the callback function
//     filterGet.get(function(error, result){
//         if(error){
//             console.log('GET Error:',error);
//             setData('get_log_count',error, true);
//         } else {
//             // result = array of events
//             // Update UI with the data received as an array of events
//             setData('get_log_count',result.length, false);
//             for(var i = 0; i < result.length ; i++){
//                 //console.log("Event.watch="+JSON.stringify(result[i]))
//                 addEventListItem('get_logs_list',result[i],50);
//             }
//         }
//     });
// }

// /**
//  * To start the event watching using the contract object
//  */

// function    doContractEventWatchStart() {

//     if(contractEvent){
//         doContractEventWatchStop();
//     }

//     // Reset the UI
//     setData('watch_contract_instance_event_count','0',false);

//     contractEvent = createContractEventInstance();

//     contractEvent.watch(function(error, result){
//         if(error){
//             console.error('Contract Event Error');
//         } else {

//         //    console.log("Event.watch="+JSON.stringify(result))
//             // increment the count watch_instance_event_count
//             contractEventCounter++;
//             setData('watch_contract_instance_event_count',contractEventCounter, false );

//             addEventListItem('watch_contract_events_list',result,5);
//         }
//     });
// }


/**
 * To stop the event watching using the contract object
 */

// function    doContractEventWatchStop()   {

//     if(contractEvent){
//         contractEvent.stopWatching();
//         contractEvent = undefined;
//     }
//     contractEventCounter = 0;
//     clearList('watch_contract_events_list');
//     setData('watch_contract_instance_event_count', '---', true);
// }

// /**
//  * Gets the logs for the specific contract instance
//  */

// function doContractEventGet() {

//     clearList('get_contract_instance_logs_list');
//     setData('get_contract_instance_log_count', '---', true);
//     var event = createContractEventInstance();
//     event.get(function(error, result){
//         if(error){
//             setData('get_contract_instance_log_count',error,true);
//         } else {
//             setData('get_contract_instance_log_count',result.length, false);
//             for(var i = 0; i < result.length ; i++){
//                 addEventListItem('get_contract_instance_logs_list',result[i],50);
//             }
//         }
//     });
// }

function displayLog() {

    betherosContract.allEvents(
        {
            fromBlock: betherosFirstBlock,
            toBlock: 'latest'
        }).get(function(error, result){
           if(error){
                $('#get_contract_instance_log_count').text(error);
           }else{
                $('#get_contract_instance_log_count').text(result.length);
                // $('#get_contract_instance_log_list').text("<li color=green>"+"asdf</li>");
                for(var i = result.length - 1; i >= 0 ; i--){
                  var html;
                    console.log(result[i]);
                    //switch(result[i].)//todo
                    if (result[i].args.hasOwnProperty('donatorName')){
                      html = "<h4> DONATION </h4><div class='bg-primary'> Donator: "+ result[i].args.donatorName +" <br/>" +
                        "Amount: "+ web3.fromWei(result[i].args.amount, 'ether') +" ETH </div> ";
                      // console.log(result[i].args.donatorName)

                    }
                    else if (result[i].args.hasOwnProperty('action')){
                        // console.log('action')
                        console.log(result[i].args.action.c[0])

                        if (result[i].args.action.c[0] === 0){
                            html = "<h4> CONTRIBUTION </h4> <div class='bg-info'> Contributor: "+ result[i].args.username  +"<br/>" +
                              "Reward: "+ web3.fromWei(result[i].args.amount, 'ether') +"ETH <br/>" +
                              "Contribution Type: Pull Request Create</div>";
                        }
                        else if (result[i].args.action.c[0] === 1){
                            html = "<h4> CONTRIBUTION </h4> <div class='bg-info'> Contributor: "+ result[i].args.username  +"<br/>" +
                              "Reward: "+ web3.fromWei(result[i].args.amount, 'ether') +"ETH <br/>" +
                              "Contribution Type: Pull Requst Review</div>";
                        }
                        else if (result[i].args.action.c[0] === 2){
                            html = "<h4> CONTRIBUTION </h4> <div class='bg-info'> Contributor: "+ result[i].args.username  +"<br/>" +
                              "Reward: "+ web3.fromWei(result[i].args.amount, 'ether') +"ETH <br/>" +
                              "Contribution Type: Issue Resolved</div>";
                        }
                    }
                    $('#get_contract_instance_log_list').append(html);
                    // html = "<li> "
                    // $('#get_contract_instance_log_list').append(
                    //     "<li>"+JSON.stringify(result[i].args)+"</li>"
                    // );
                }
           }
        })
}

/**
 * Utility method for creating an instance of the event
 */
function createContractEventInstance(){

    var contractInstance = createContractInstance(contractAddress);

    // geth the indexed data values JSON
    var indexedEventValues = document.getElementById('indexed_event_values').value
    indexedEventValues = JSON.parse(indexedEventValues);

    var additionalFilterOptions = document.getElementById('additional_filter_event_values').value;
    additionalFilterOptions = JSON.parse(additionalFilterOptions);

    return contractInstance.NumberSetEvent(indexedEventValues, additionalFilterOptions);
}
